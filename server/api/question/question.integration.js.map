{"version":3,"sources":["../../../../server/api/question/question.integration.js"],"names":[],"mappings":"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","file":"question.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\nvar User = require('../user/user.model');\n\nvar newQuestion;\n\ndescribe('Question API:', function() {\n  var user;\n  before(function() {\n    return User.removeAsync().then(function() {\n      user = new User({\n        name: 'Fake User',\n        email: 'test@test.com',\n        password: 'password'\n      });\n\n      return user.saveAsync();\n    });\n  });\n\n  var token;\n  before(function(done) {\n    request(app)\n      .post('/auth/local')\n      .send({\n        email: 'test@test.com',\n        password: 'password'\n      })\n      .expect(200)\n      .expect('Content-Type', /json/)\n      .end(function(err, res) {\n        token = res.body.token;\n        done();\n      });\n  });\n  \n  describe('GET /api/questions', function() {\n    var questions;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/questions')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          questions = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      questions.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/questions', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/questions')\n        .set('authorization', 'Bearer ' + token)\n        .send({\n          title: 'New Question',\n          content: 'This is the brand new question!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newQuestion = res.body;\n          console.warn(\"newQuestion:test1\",newQuestion);\n          done();\n        });\n    });\n\n    it('should respond with the newly created question', function() {\n          console.warn(\"newQuestion:test2\",newQuestion);\n      newQuestion.title.should.equal('New Question');\n      newQuestion.content.should.equal('This is the brand new question!!!');\n    });\n\n  });\n\n  describe('GET /api/questions/:id', function() {\n    var question;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/questions/' + newQuestion._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          question = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      question = {};\n    });\n\n    it('should respond with the requested question', function() {\n      question.title.should.equal('New Question');\n      question.content.should.equal('This is the brand new question!!!');\n    });\n\n  });\n\n/*\n  describe('PUT /api/questions/:id', function() {\n    var updatedQuestion;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/questions/' + newQuestion._id)\n        .set('authorization', 'Bearer ' + token)\n        .send({\n          title: 'Updated Question',\n          content: 'This is the updated question!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedQuestion = res.body;\n          done();\n        });\n    });\n    afterEach(function() {\n      updatedQuestion = {};\n    });\n\n    it('should respond with the updated question', function() {\n      updatedQuestion.title.should.equal('Updated Question');\n      updatedQuestion.content.should.equal('This is the updated question!!!');\n    });\n\n  });\n*/\n\n  describe('DELETE /api/questions/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/questions/' + newQuestion._id)\n        .set('authorization', 'Bearer ' + token)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when question does not exist', function(done) {\n      request(app)\n        .delete('/api/questions/' + newQuestion._id)\n        .set('authorization', 'Bearer ' + token)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}